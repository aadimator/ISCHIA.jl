var documenterSearchIndex = {"docs":
[{"location":"library/functions/","page":"Functions","title":"Functions","text":"CurrentModule = ISCHIA","category":"page"},{"location":"library/functions/#Functions","page":"Functions","title":"Functions","text":"","category":"section"},{"location":"library/functions/#Index","page":"Functions","title":"Index","text":"","category":"section"},{"location":"library/functions/","page":"Functions","title":"Functions","text":"Pages = [\"functions.md\"]","category":"page"},{"location":"library/functions/#Co-occurrence-Analysis","page":"Functions","title":"Co-occurrence Analysis","text":"","category":"section"},{"location":"library/functions/","page":"Functions","title":"Functions","text":"calculate_cooccurrence_stats\nsummarize_cooccur\n","category":"page"},{"location":"library/functions/#ISCHIA.calculate_cooccurrence_stats","page":"Functions","title":"ISCHIA.calculate_cooccurrence_stats","text":"Calculate co-occurrence statistics and probabilities.\n\nArguments\n\nmat::Matrix{Int}: A binary species by site matrix.\nspecie_names::Vector{String}: Names of species.\ntype::String: Type of matrix ('sppsite' or 'sitespp').\nthresh::Bool: Whether to apply a threshold.\nspp_names::Bool: Whether to include species names.\ntrue_rand_classifier::Float64: True random classifier.\nprob::String: Probability calculation method ('hyper' or 'comb').\nsite_mask::Union{Nothing, Matrix{Int}}: Matrix specifying sites.\nonly_effects::Bool: Whether to calculate only effects.\neff_standard::Bool: Whether to standardize effects.\neff_matrix::Bool: Whether to calculate effect matrix.\n\nReturns\n\nA dictionary containing various co-occurrence statistics and results.\n\n\n\n\n\n","category":"function"},{"location":"library/functions/#ISCHIA.summarize_cooccur","page":"Functions","title":"ISCHIA.summarize_cooccur","text":"Summarize the results of a co-occurrence analysis.\n\nArguments\n\ncooccur_output::CooccurOutput: Co-occurrence analysis object.\n\nReturns\n\nA summary of the co-occurrence analysis results as a dictionary.\n\n\n\n\n\n","category":"function"},{"location":"library/functions/#LR-Enrichment-Analysis","page":"Functions","title":"LR-Enrichment Analysis","text":"","category":"section"},{"location":"library/functions/","page":"Functions","title":"Functions","text":"find_enriched_LR_pairs\nfind_differentially_cooccurring_LR_pairs","category":"page"},{"location":"library/functions/#ISCHIA.find_enriched_LR_pairs","page":"Functions","title":"ISCHIA.find_enriched_LR_pairs","text":"Calculate significant co-occurring Ligand-Receptor pairs.\n\nThis function calculates co-occurring Ligand-Receptor (LR) pairs that are statistically significant based on expression levels and correlations in a spatial dataset.\n\nParameters:\n\nadata::AnnData: The (spatial) anndata dataset containing expression data.\nCOI::Vector{String}: Cluster of Interest, a subset of spots to focus on.\nCondition::Vector{String}: Condition of interest within the dataset.\nLR_list::Vector{String}: List of ligands and receptors to consider.\nLR_pairs::Vector{String}: List of LR pairs to analyze.\nexp_th::Real: Expression threshold for binarizing the expression matrix.\ncorr_th::Real: Correlation threshold for LR pairs.\n\nReturns: A dictionary containing:\n\n\"enriched_LRs\": DataFrame of enriched LR pairs.\n\"cooccurrence_table\": Co-occurrence analysis results.\n\n\n\n\n\n","category":"function"},{"location":"library/functions/#ISCHIA.find_differentially_cooccurring_LR_pairs","page":"Functions","title":"ISCHIA.find_differentially_cooccurring_LR_pairs","text":"Find LR (Ligand Receptor) pairs that are significantly co-occurring in one group and not in the other group.\n\nArguments\n\ncooc_df_1::DataFrame: Results from the EnrichedLRs function for Group 1.\ncooc_df_2::DataFrame: Results from the EnrichedLRs function for Group 2.\ngroup1_max_pval::Real: Maximum p-value threshold for significance levels of co-occurring LR pairs in Group 1.\ngroup2_min_pval::Real: Minimum p-value threshold for non-significance levels of co-occurring LR pairs in Group 2.\n\nReturns\n\nList of LR pairs enriched in Group 1 and not in Group 2.\n\n\n\n\n\nFind LR (Ligand Receptor) pairs that are significantly co-occurring in one group and not in the other group.\n\nArguments\n\ngroup1_results::Dict{String, Any}: Results from the EnrichedLRs function for Group 1.\ngroup2_results::Dict{String, Any}: Results from the EnrichedLRs function for Group 2.\ngroup1_max_pval::Real: Maximum p-value threshold for significance levels of co-occurring LR pairs in Group 1.\ngroup2_min_pval::Real: Minimum p-value threshold for non-significance levels of co-occurring LR pairs in Group 2.\n\nReturns\n\nList of LR pairs enriched in Group 1 and not in Group 2.\n\n\n\n\n\n","category":"function"},{"location":"man/basics/#First-Steps-with-ISCHIA.jl","page":"Basic Usage","title":"First Steps with ISCHIA.jl","text":"","category":"section"},{"location":"man/basics/#Setting-up-the-Environment","page":"Basic Usage","title":"Setting up the Environment","text":"","category":"section"},{"location":"man/basics/","page":"Basic Usage","title":"Basic Usage","text":"Make sure that you have Julia version ge 16 installed already. To add ISCHIA.jl as a package dependency, we need to install it from GitHub directly, as it hasn't been released on the Julia Registery yet. ","category":"page"},{"location":"man/basics/","page":"Basic Usage","title":"Basic Usage","text":"This can be done in either of the two ways:","category":"page"},{"location":"man/basics/","page":"Basic Usage","title":"Basic Usage","text":"julia> using Pkg\n\njulia> Pkg.add(url=\"https://github.com/aadimator/ISCHIA.jl\")","category":"page"},{"location":"man/basics/","page":"Basic Usage","title":"Basic Usage","text":"or","category":"page"},{"location":"man/basics/","page":"Basic Usage","title":"Basic Usage","text":"julia> ] # ']' should be pressed\n\n(@v1.9) pkg> add https://github.com/aadimator/ISCHIA.jl","category":"page"},{"location":"man/basics/","page":"Basic Usage","title":"Basic Usage","text":"This will clone the repository from the GitHub and install it in your package environment.","category":"page"},{"location":"man/basics/","page":"Basic Usage","title":"Basic Usage","text":"If you already have the GitHub repository cloned on your system and you want to install the package using that, you can do so with the following commands. Make sure that you are in the cloned project directory when running the followin commands.","category":"page"},{"location":"man/basics/","page":"Basic Usage","title":"Basic Usage","text":"julia> using Pkg\n\njulia> Pkg.add(\".\") # Install current directory as a package","category":"page"},{"location":"man/basics/","page":"Basic Usage","title":"Basic Usage","text":"or","category":"page"},{"location":"man/basics/","page":"Basic Usage","title":"Basic Usage","text":"julia> ] # ']' should be pressed\n\n(@v1.9) pkg> add .","category":"page"},{"location":"man/basics/","page":"Basic Usage","title":"Basic Usage","text":"Throughout the rest of the tutorial we will assume that you have installed the ISCHIA.jl package and have already typed using ISCHIA which loads the package:","category":"page"},{"location":"man/basics/","page":"Basic Usage","title":"Basic Usage","text":"julia> using ISCHIA","category":"page"},{"location":"man/basics/","page":"Basic Usage","title":"Basic Usage","text":"ISCHIA provides optimized implementations of several functions from the original ISCHIA repository, which was coded in R. Below, we'll try to replicate their Cooccurrence of ligand and receptors section, using their provided small dataset. Instructions on converting and importing their Seurat Object into AnnData object has been described in section.","category":"page"},{"location":"man/basics/#Load-the-Libraries","page":"Basic Usage","title":"Load the Libraries","text":"","category":"section"},{"location":"man/basics/","page":"Basic Usage","title":"Basic Usage","text":"First, let's load the required libraries. Install any library that isn't in your package environment already. Julia will automatically suggest the command to install missing packages.","category":"page"},{"location":"man/basics/","page":"Basic Usage","title":"Basic Usage","text":"using Muon\nusing RData\nusing ISCHIA\nusing DataFrames\nusing Combinatorics","category":"page"},{"location":"man/basics/#Load-the-Data","page":"Basic Usage","title":"Load the Data","text":"","category":"section"},{"location":"man/basics/","page":"Basic Usage","title":"Basic Usage","text":"sdata = readh5ad(joinpath(pkgdir(ISCHIA), \"docs\", \"src\", \"assets\", \"Spatial.h5ad\"))\nlr_network = load(joinpath(pkgdir(ISCHIA), \"docs\", \"src\", \"assets\", \"lr_network.rds\"))\nsize(lr_network)","category":"page"},{"location":"man/basics/#Filter-LR-Network","page":"Basic Usage","title":"Filter LR Network","text":"","category":"section"},{"location":"man/basics/","page":"Basic Usage","title":"Basic Usage","text":"gene_names = sdata.var.name\nsdata.var_names = gene_names\n\n# Create LR_Pairs column\nlr_network[!, :LR_Pairs] = string.(lr_network.from, \"_\", lr_network.to);\nlr_network = lr_network[:, [:from, :to, :LR_Pairs]]\n\n# Filter lr_network based on conditions\nfrom_filter = in.(lr_network[:, :from], Ref(gene_names))\nto_filter = in.(lr_network[:, :to], Ref(gene_names))\nall_LR_network = lr_network[from_filter .& to_filter, :];\n\n# Extract unique genes and common genes\nall_LR_genes = unique(vcat(all_LR_network[:, :from], all_LR_network[:, :to]))\nall_LR_genes_comm = intersect(all_LR_genes, collect(gene_names));\n\n# Create LR.pairs and LR.pairs.AllCombos\nLR_pairs = all_LR_network[:, :LR_Pairs]\nall_combos = [join(combo, \"_\") for combo in combinations(all_LR_genes_comm, 2)];\nlength(all_combos)","category":"page"},{"location":"man/basics/#Calculate-LR-Enrchiment","page":"Basic Usage","title":"Calculate LR Enrchiment","text":"","category":"section"},{"location":"man/basics/","page":"Basic Usage","title":"Basic Usage","text":"spatial_object = sdata\nspatial_object.var_names = spatial_object.var.name\nCondition = unique(spatial_object.obs[!, \"orig.ident\"])\nLR_list = all_LR_genes_comm\nLR_pairs = LR_pairs\nexp_th = 1\ncorr_th = 0.2\n\ncc4_enriched_lr = find_enriched_LR_pairs(spatial_object, [\"CC4\"], Condition, LR_list, LR_pairs, exp_th, corr_th);\ncc7_enriched_lr = find_enriched_LR_pairs(spatial_object, [\"CC7\"], Condition, LR_list, LR_pairs, exp_th, corr_th);","category":"page"},{"location":"man/basics/#Display-Calculated-LR-Encrichment-Scores","page":"Basic Usage","title":"Display Calculated LR Encrichment Scores","text":"","category":"section"},{"location":"man/basics/","page":"Basic Usage","title":"Basic Usage","text":"first(cc4_enriched_lr[\"enriched_LRs\"], 5)","category":"page"},{"location":"man/basics/","page":"Basic Usage","title":"Basic Usage","text":"first(cc7_enriched_lr[\"enriched_LRs\"], 5)","category":"page"},{"location":"man/basics/#Find-Differentially-Occurring-LR-pairs","page":"Basic Usage","title":"Find Differentially Occurring LR pairs","text":"","category":"section"},{"location":"man/basics/","page":"Basic Usage","title":"Basic Usage","text":"diff_df47 = find_differentially_cooccurring_LR_pairs(cc7_enriched_lr, cc4_enriched_lr, 0.05, 0.1)\nfirst(diff_df47, 10)","category":"page"},{"location":"man/seurat_conversion/#Converting-Seurat-Objects-to-AnnData","page":"Convert Seurat Objects","title":"Converting Seurat Objects to AnnData","text":"","category":"section"},{"location":"man/seurat_conversion/","page":"Convert Seurat Objects","title":"Convert Seurat Objects","text":"The recommended way now is to use cellgeni/sceasy. All the other methods were giving me some kind of error. Here’s how I made it work:","category":"page"},{"location":"man/seurat_conversion/#Install-and-Load-Libraries","page":"Convert Seurat Objects","title":"Install and Load Libraries","text":"","category":"section"},{"location":"man/seurat_conversion/","page":"Convert Seurat Objects","title":"Convert Seurat Objects","text":"install.packages('Seurat')\ninstall.packages('reticulate')\ndevtools::install_github(\"cellgeni/sceasy\")","category":"page"},{"location":"man/seurat_conversion/","page":"Convert Seurat Objects","title":"Convert Seurat Objects","text":"library(Seurat)\nlibrary(sceasy)\nlibrary(reticulate)\nuse_condaenv('EnvironmentName') #environment where AnnData is installed","category":"page"},{"location":"man/seurat_conversion/#Load-the-Seurat-Object","page":"Convert Seurat Objects","title":"Load the Seurat Object","text":"","category":"section"},{"location":"man/seurat_conversion/","page":"Convert Seurat Objects","title":"Convert Seurat Objects","text":"load(\"IBD_visium_SeuratObj_small.RData\") # in my case","category":"page"},{"location":"man/seurat_conversion/#Convert-to-AnnData","page":"Convert Seurat Objects","title":"Convert to AnnData","text":"","category":"section"},{"location":"man/seurat_conversion/","page":"Convert Seurat Objects","title":"Convert Seurat Objects","text":"Make sure that reticulate has some python version installed, and also, you need to install anndata python package into that environment.","category":"page"},{"location":"man/seurat_conversion/","page":"Convert Seurat Objects","title":"Convert Seurat Objects","text":"sceasy::convertFormat(IBD.visium.P4, from=\"seurat\", to=\"anndata\", outFile='Spatial.h5ad', assay=\"Spatial\", drop_single_values = FALSE, transfer_layers = c(\"counts\", \"data\", \"scale.data\"))","category":"page"},{"location":"man/seurat_conversion/#Read-in-Python","page":"Convert Seurat Objects","title":"Read in Python","text":"","category":"section"},{"location":"man/seurat_conversion/","page":"Convert Seurat Objects","title":"Convert Seurat Objects","text":"import anndata\nadata = anndata.read_h5ad(\"Spatial.h5ad\")","category":"page"},{"location":"man/seurat_conversion/#Read-in-Julia","page":"Convert Seurat Objects","title":"Read in Julia","text":"","category":"section"},{"location":"man/seurat_conversion/","page":"Convert Seurat Objects","title":"Convert Seurat Objects","text":"You need to make sure that Muon is using the latest version from GitHub. Otherwise, it might give a categorical error when read in the file.","category":"page"},{"location":"man/seurat_conversion/","page":"Convert Seurat Objects","title":"Convert Seurat Objects","text":"add Muon#main","category":"page"},{"location":"man/seurat_conversion/","page":"Convert Seurat Objects","title":"Convert Seurat Objects","text":"And then, we can read in the data:","category":"page"},{"location":"man/seurat_conversion/","page":"Convert Seurat Objects","title":"Convert Seurat Objects","text":"using Muon\n\nadata = readh5ad(\"Spatial.h5ad\")\ndisplay(first(adata.obs, 5))\ndisplay(first(adata.var, 5))\nadata.obsm","category":"page"},{"location":"man/seurat_conversion/#References","page":"Convert Seurat Objects","title":"References","text":"","category":"section"},{"location":"man/seurat_conversion/","page":"Convert Seurat Objects","title":"Convert Seurat Objects","text":"Convert Seurat to Scanpy h5ad - My Computational Genomic Playground (zqfang.github.io)\ncellgeni/sceasy: A package to help convert different single-cell data formats to each other (github.com)","category":"page"},{"location":"library/internals/","page":"Internals","title":"Internals","text":"CurrentModule = ISCHIA","category":"page"},{"location":"library/internals/#Utility-Functions","page":"Internals","title":"Utility Functions","text":"","category":"section"},{"location":"library/internals/","page":"Internals","title":"Internals","text":"These functions are for internal use. They can be accessed by appending the package name and a dot before the function name, e.g. ISCHIA.calculate_cooccurrence_matrix. Keep in mind that these functions can change their signature without warnings.","category":"page"},{"location":"library/internals/","page":"Internals","title":"Internals","text":"ISCHIA.calculate_cooccurrence_matrix\nISCHIA.effect_sizes","category":"page"},{"location":"library/internals/#ISCHIA.calculate_cooccurrence_matrix","page":"Internals","title":"ISCHIA.calculate_cooccurrence_matrix","text":"Calculate the co-occurrence matrix N from a binary species-site matrix.\n\nThis function creates a species by species matrix of potential co-occurring sites (N) from a binary species by site matrix, where 1 represents potential occupancy, and 0 indicates species absence.\n\nArguments\n\nmat::Matrix{Int}: A binary species by site matrix.\n\nReturns\n\nA species by species matrix where the upper triangle contains N for each species pair.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ISCHIA.effect_sizes","page":"Internals","title":"ISCHIA.effect_sizes","text":"effect_sizes(cooccur; standardized=true)\n\nCalculate effect sizes for co-occurrence analysis results.\n\nArguments\n\ncooccur: A co-occurrence analysis object.\nstandardized: A boolean indicating whether to calculate standardized effect sizes.\n\nReturns\n\nEffect sizes as a data frame.\n\n\n\n\n\n","category":"function"},{"location":"library/types/","page":"Types","title":"Types","text":"CurrentModule = ISCHIA","category":"page"},{"location":"library/types/#Types","page":"Types","title":"Types","text":"","category":"section"},{"location":"library/types/","page":"Types","title":"Types","text":"Pages = [\"types.md\"]","category":"page"},{"location":"library/types/","page":"Types","title":"Types","text":"CooccurOutput","category":"page"},{"location":"library/types/#ISCHIA.CooccurOutput","page":"Types","title":"ISCHIA.CooccurOutput","text":"A mutable struct representing the output of co-occurrence analysis.\n\nFields\n\nresults::DataFrame: A DataFrame containing analysis results.\npositive::Int: The count of positive results.\nnegative::Int: The count of negative results.\nco_occurrences::Int: The count of co-occurrences.\npairs::Int: The total number of pairs.\nrandom::Int: The count of random results.\nunclassifiable::Int: The count of unclassifiable results.\nsites::Matrix{Int}: A matrix representing site information.\nspecies::Int: The count of species.\npercent_sig::Float64: The percentage of significant results.\nspp_key::Union{Nothing, DataFrame}: A DataFrame containing species keys (optional).\nspp_names::Union{Vector{Int}, Vector{String}}: A vector of species names. If names weren't provided, then it would contain numerical identifiers.\nomitted::Union{Nothing, Int}: The count of omitted results (optional).\npot_pairs::Union{Nothing, Int}: The count of potential pairs (optional).\ntrue_rand_classifier::Float64: The true random classifier value.\n\nThis mutable struct is used to encapsulate and organize the results of co-occurrence analysis.\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = ISCHIA","category":"page"},{"location":"#ISCHIA","page":"Home","title":"ISCHIA","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package is a reimplementation of the ISCHIA LR interaction algorithm in Julia. The original implementation is in R and can be found here. The algorithm is described in the paper Identifying Spatial Co-occurrence in Healthy and InflAmed tissues (ISCHIA). ","category":"page"},{"location":"","page":"Home","title":"Home","text":"In the original implementation, the LR interaction part of the algorithm is very slow and can take days to run on large datasets. This package aims to speed up the LR interaction part of the algorithm by using Julia's speed and parallelism. For comparison, the original implementation took almost 3 hours to run on their toy/smaller dataset, while the same dataset took around 6 seconds to run on this package.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Once the LR interactions are calculated, the rest of the plotting and analysis can be done in R using the original package.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"man/basics.md\",\n         \"man/getting_started.md\"]\nDepth = 2","category":"page"}]
}
