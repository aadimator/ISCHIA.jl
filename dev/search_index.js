var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = ISCHIA","category":"page"},{"location":"#ISCHIA","page":"Home","title":"ISCHIA","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ISCHIA.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [ISCHIA]","category":"page"},{"location":"#ISCHIA.CooccurOutput","page":"Home","title":"ISCHIA.CooccurOutput","text":"A mutable struct representing the output of co-occurrence analysis.\n\nFields\n\nresults::DataFrame: A DataFrame containing analysis results.\npositive::Int: The count of positive results.\nnegative::Int: The count of negative results.\nco_occurrences::Int: The count of co-occurrences.\npairs::Int: The total number of pairs.\nrandom::Int: The count of random results.\nunclassifiable::Int: The count of unclassifiable results.\nsites::Matrix{Int}: A matrix representing site information.\nspecies::Int: The count of species.\npercent_sig::Float64: The percentage of significant results.\nspp_key::Union{Nothing, DataFrame}: A DataFrame containing species keys (optional).\nspp_names::Union{Vector{Int}, Vector{String}}: A vector of species names. If names weren't provided, then it would contain numerical identifiers.\nomitted::Union{Nothing, Int}: The count of omitted results (optional).\npot_pairs::Union{Nothing, Int}: The count of potential pairs (optional).\ntrue_rand_classifier::Float64: The true random classifier value.\n\nThis mutable struct is used to encapsulate and organize the results of co-occurrence analysis.\n\n\n\n\n\n","category":"type"},{"location":"#ISCHIA.calculate_cooccurrence_matrix-Tuple{Matrix{Int64}}","page":"Home","title":"ISCHIA.calculate_cooccurrence_matrix","text":"Calculate the co-occurrence matrix N from a binary species-site matrix.\n\nThis function creates a species by species matrix of potential co-occurring sites (N) from a binary species by site matrix, where 1 represents potential occupancy, and 0 indicates species absence.\n\nArguments\n\nmat::Matrix{Int}: A binary species by site matrix.\n\nReturns\n\nA species by species matrix where the upper triangle contains N for each species pair.\n\nExamples\n\n```julia\n\nDefine a binary species by site matrix\n\nspeciesmatrix = rand(Bool, numspecies, num_sites)\n\nCalculate the co-occurrence matrix N\n\ncooccurrencematrix = createNmatrix(speciesmatrix)\n\n\n\n\n\n","category":"method"},{"location":"#ISCHIA.calculate_cooccurrence_stats-Tuple{Matrix{Bool}, Vector{String}}","page":"Home","title":"ISCHIA.calculate_cooccurrence_stats","text":"Calculate co-occurrence statistics and probabilities.\n\nArguments\n\nmat::Matrix{Int}: A binary species by site matrix.\nspecie_names::Vector{String}: Names of species.\ntype::String: Type of matrix ('sppsite' or 'sitespp').\nthresh::Bool: Whether to apply a threshold.\nspp_names::Bool: Whether to include species names.\ntrue_rand_classifier::Float64: True random classifier.\nprob::String: Probability calculation method ('hyper' or 'comb').\nsite_mask::Union{Nothing, Matrix{Int}}: Matrix specifying sites.\nonly_effects::Bool: Whether to calculate only effects.\neff_standard::Bool: Whether to standardize effects.\neff_matrix::Bool: Whether to calculate effect matrix.\n\nReturns\n\nA dictionary containing various co-occurrence statistics and results.\n\n\n\n\n\n","category":"method"},{"location":"#ISCHIA.effect_sizes-Tuple{Any}","page":"Home","title":"ISCHIA.effect_sizes","text":"effect_sizes(cooccur; standardized=true)\n\nCalculate effect sizes for co-occurrence analysis results.\n\nArguments\n\ncooccur: A co-occurrence analysis object.\nstandardized: A boolean indicating whether to calculate standardized effect sizes.\n\nReturns\n\nEffect sizes as a data frame.\n\nExample\n\n```julia effectsizes(cooccurobject)\n\n\n\n\n\n","category":"method"},{"location":"#ISCHIA.find_differentially_cooccurring_LR_pairs-NTuple{4, Any}","page":"Home","title":"ISCHIA.find_differentially_cooccurring_LR_pairs","text":"Find LR (Ligand Receptor) pairs that are significantly co-occurring in one group and not in the other group.\n\nArguments\n\ngroup1_results: Results from the EnrichedLRs function for Group 1.\ngroup2_results: Results from the EnrichedLRs function for Group 2.\ngroup1_max_pval: Maximum p-value threshold for significance levels of co-occurring LR pairs in Group 1.\ngroup2_min_pval: Minimum p-value threshold for non-significance levels of co-occurring LR pairs in Group 2.\n\nReturns\n\nList of LR pairs enriched in Group 1 and not in Group 2.\n\nExample\n\n```julia result = finddifferentiallycooccurringLRpairs(resultsgroup1, resultsgroup2, 0.05, 0.1)\n\n\n\n\n\n","category":"method"},{"location":"#ISCHIA.find_enriched_LR_pairs-Tuple{Muon.AnnData, Vector{String}, Vector{String}, Vector{String}, Vector{String}, Real, Real}","page":"Home","title":"ISCHIA.find_enriched_LR_pairs","text":"Calculate significant co-occurring Ligand-Receptor pairs.\n\nThis function calculates co-occurring Ligand-Receptor (LR) pairs that are statistically significant based on expression levels and correlations in a spatial dataset.\n\nParameters:\n\nadata::AnnData: The (spatial) anndata dataset containing expression data.\nCOI::Vector{String}: Cluster of Interest, a subset of spots to focus on.\nCondition::Vector{String}: Condition of interest within the dataset.\nLR_list::Vector{String}: List of ligands and receptors to consider.\nLR_pairs::Vector{String}: List of LR pairs to analyze.\nexp_th::Real: Expression threshold for binarizing the expression matrix.\ncorr_th::Real: Correlation threshold for LR pairs.\n\nReturns: A dictionary containing:\n\n\"enriched_LRs\": DataFrame of enriched LR pairs.\n\"cooccurrence_table\": Co-occurrence analysis results.\n\n\n\n\n\n","category":"method"},{"location":"#ISCHIA.summarize_cooccur-Tuple{CooccurOutput}","page":"Home","title":"ISCHIA.summarize_cooccur","text":"Summarize the results of a co-occurrence analysis.\n\nArguments\n\ncooccur_output::CooccurOutput: Co-occurrence analysis object.\n\nReturns\n\nA summary of the co-occurrence analysis results as a dictionary.\n\nExample\n\n```julia summary = summarizecooccur(cooccurobject)\n\n\n\n\n\n","category":"method"}]
}
